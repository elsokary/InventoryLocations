//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(InventoryContext.Context.favStoreEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets4fc56d95ad242a96f4453c51150661758639fbb2d75d3b9b176f7532d8e1b498))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets4fc56d95ad242a96f4453c51150661758639fbb2d75d3b9b176f7532d8e1b498 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "4fc56d95ad242a96f4453c51150661758639fbb2d75d3b9b176f7532d8e1b498"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "favStoreModelStoreContainer.accounts")
            {
                return GetView0();
            }

            if (extentName == "favStoreModelStoreContainer.branches")
            {
                return GetView1();
            }

            if (extentName == "favStoreModelStoreContainer.cashier")
            {
                return GetView2();
            }

            if (extentName == "favStoreModelStoreContainer.cashier_items")
            {
                return GetView3();
            }

            if (extentName == "favStoreModelStoreContainer.customers")
            {
                return GetView4();
            }

            if (extentName == "favStoreModelStoreContainer.groupPermissions")
            {
                return GetView5();
            }

            if (extentName == "favStoreModelStoreContainer.Groups")
            {
                return GetView6();
            }

            if (extentName == "favStoreModelStoreContainer.invoice_items")
            {
                return GetView7();
            }

            if (extentName == "favStoreModelStoreContainer.invoices")
            {
                return GetView8();
            }

            if (extentName == "favStoreModelStoreContainer.itemsDecription")
            {
                return GetView9();
            }

            if (extentName == "favStoreModelStoreContainer.location-items")
            {
                return GetView10();
            }

            if (extentName == "favStoreModelStoreContainer.locations")
            {
                return GetView11();
            }

            if (extentName == "favStoreModelStoreContainer.refund_iems")
            {
                return GetView12();
            }

            if (extentName == "favStoreModelStoreContainer.refunds")
            {
                return GetView13();
            }

            if (extentName == "favStoreModelStoreContainer.suppliers")
            {
                return GetView14();
            }

            if (extentName == "favStoreModelStoreContainer.supplyOrders")
            {
                return GetView15();
            }

            if (extentName == "favStoreModelStoreContainer.supplyOrders_items")
            {
                return GetView16();
            }

            if (extentName == "favStoreModelStoreContainer.transactionsHistory")
            {
                return GetView17();
            }

            if (extentName == "favStoreModelStoreContainer.transactionTypes")
            {
                return GetView18();
            }

            if (extentName == "favStoreModelStoreContainer.transactions")
            {
                return GetView19();
            }

            if (extentName == "favStoreEntities.accounts")
            {
                return GetView20();
            }

            if (extentName == "favStoreEntities.branches")
            {
                return GetView21();
            }

            if (extentName == "favStoreEntities.cashiers")
            {
                return GetView22();
            }

            if (extentName == "favStoreEntities.cashier_items")
            {
                return GetView23();
            }

            if (extentName == "favStoreEntities.customers")
            {
                return GetView24();
            }

            if (extentName == "favStoreEntities.groupPermissions")
            {
                return GetView25();
            }

            if (extentName == "favStoreEntities.Groups")
            {
                return GetView26();
            }

            if (extentName == "favStoreEntities.invoice_items")
            {
                return GetView27();
            }

            if (extentName == "favStoreEntities.invoices")
            {
                return GetView28();
            }

            if (extentName == "favStoreEntities.itemsDecriptions")
            {
                return GetView29();
            }

            if (extentName == "favStoreEntities.location_items")
            {
                return GetView30();
            }

            if (extentName == "favStoreEntities.locations")
            {
                return GetView31();
            }

            if (extentName == "favStoreEntities.refund_iems")
            {
                return GetView32();
            }

            if (extentName == "favStoreEntities.refunds")
            {
                return GetView33();
            }

            if (extentName == "favStoreEntities.suppliers")
            {
                return GetView34();
            }

            if (extentName == "favStoreEntities.supplyOrders")
            {
                return GetView35();
            }

            if (extentName == "favStoreEntities.supplyOrders_items")
            {
                return GetView36();
            }

            if (extentName == "favStoreEntities.transactionsHistories")
            {
                return GetView37();
            }

            if (extentName == "favStoreEntities.transactionTypes")
            {
                return GetView38();
            }

            if (extentName == "favStoreEntities.transactions")
            {
                return GetView39();
            }

            if (extentName == "favStoreModelStoreContainer.default_list")
            {
                return GetView40();
            }

            if (extentName == "favStoreEntities.default_list")
            {
                return GetView41();
            }

            if (extentName == "favStoreModelStoreContainer.inven_Settings")
            {
                return GetView42();
            }

            if (extentName == "favStoreEntities.inven_Settings")
            {
                return GetView43();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.accounts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing accounts
        [favStoreModel.Store.accounts](T1.accounts_id, T1.accounts_userName, T1.accounts_contactName, T1.accounts_passWord, T1.accounts_address, T1.accounts_phone, T1.accounts_email, T1.accounts_groupId, T1.accounts_supervisorId, T1.accounts_userType, T1.accounts_branchId, T1.accounts_loggedTime, T1.accounts_shiftIn, T1.accounts_shiftOut, T1.accounts_deletedBy)
    FROM (
        SELECT 
            T.id AS accounts_id, 
            T.userName AS accounts_userName, 
            T.contactName AS accounts_contactName, 
            T.passWord AS accounts_passWord, 
            T.address AS accounts_address, 
            T.phone AS accounts_phone, 
            T.email AS accounts_email, 
            T.groupId AS accounts_groupId, 
            T.supervisorId AS accounts_supervisorId, 
            T.userType AS accounts_userType, 
            T.branchId AS accounts_branchId, 
            T.loggedTime AS accounts_loggedTime, 
            T.shiftIn AS accounts_shiftIn, 
            T.shiftOut AS accounts_shiftOut, 
            T.deletedBy AS accounts_deletedBy, 
            True AS _from0
        FROM favStoreEntities.accounts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.branches.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing branches
        [favStoreModel.Store.branches](T1.branches_id, T1.branches_code, T1.branches_name, T1.branches_address, T1.branches_email, T1.branches_phone, T1.branches_deletedBy, T1.branches_isDefault)
    FROM (
        SELECT 
            T.id AS branches_id, 
            T.code AS branches_code, 
            T.name AS branches_name, 
            T.address AS branches_address, 
            T.email AS branches_email, 
            T.phone AS branches_phone, 
            T.deletedBy AS branches_deletedBy, 
            T.isDefault AS branches_isDefault, 
            True AS _from0
        FROM favStoreEntities.branches AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.cashier.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing cashier
        [favStoreModel.Store.cashier](T1.cashier_id, T1.cashier_branchId, T1.cashier_openedBy, T1.cashier_date, T1.cashier_serial, T1.cashier_time, T1.cashier_total, T1.cashier_paymentType, T1.cashier_customerId, T1.cashier_notes, T1.cashier_deletedBy, T1.cashier_deletedDate)
    FROM (
        SELECT 
            T.id AS cashier_id, 
            T.branchId AS cashier_branchId, 
            T.openedBy AS cashier_openedBy, 
            T.date AS cashier_date, 
            T.serial AS cashier_serial, 
            T.time AS cashier_time, 
            T.total AS cashier_total, 
            T.paymentType AS cashier_paymentType, 
            T.customerId AS cashier_customerId, 
            T.notes AS cashier_notes, 
            T.deletedBy AS cashier_deletedBy, 
            T.deletedDate AS cashier_deletedDate, 
            True AS _from0
        FROM favStoreEntities.cashiers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.cashier_items.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing cashier_items
        [favStoreModel.Store.cashier_items](T1.[cashier_items.id], T1.[cashier_items.branchId], T1.[cashier_items.cashierId], T1.[cashier_items.itemId], T1.[cashier_items.quantity], T1.[cashier_items.price], T1.[cashier_items.total])
    FROM (
        SELECT 
            T.id AS [cashier_items.id], 
            T.branchId AS [cashier_items.branchId], 
            T.cashierId AS [cashier_items.cashierId], 
            T.itemId AS [cashier_items.itemId], 
            T.quantity AS [cashier_items.quantity], 
            T.price AS [cashier_items.price], 
            T.total AS [cashier_items.total], 
            True AS _from0
        FROM favStoreEntities.cashier_items AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.customers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing customers
        [favStoreModel.Store.customers](T1.customers_id, T1.customers_code, T1.customers_name, T1.customers_address, T1.customers_phone, T1.customers_email, T1.customers_isCash, T1.customers_currentCredit, T1.customers_deletedBy, T1.customers_dueDay)
    FROM (
        SELECT 
            T.id AS customers_id, 
            T.code AS customers_code, 
            T.name AS customers_name, 
            T.address AS customers_address, 
            T.phone AS customers_phone, 
            T.email AS customers_email, 
            T.isCash AS customers_isCash, 
            T.currentCredit AS customers_currentCredit, 
            T.deletedBy AS customers_deletedBy, 
            T.dueDay AS customers_dueDay, 
            True AS _from0
        FROM favStoreEntities.customers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.groupPermissions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing groupPermissions
        [favStoreModel.Store.groupPermissions](T1.groupPermissions_id, T1.groupPermissions_groupId, T1.groupPermissions_permissionCode, T1.groupPermissions_value)
    FROM (
        SELECT 
            T.id AS groupPermissions_id, 
            T.groupId AS groupPermissions_groupId, 
            T.permissionCode AS groupPermissions_permissionCode, 
            T.[value] AS groupPermissions_value, 
            True AS _from0
        FROM favStoreEntities.groupPermissions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.Groups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Groups
        [favStoreModel.Store.Groups](T1.Groups_id, T1.Groups_groupName, T1.Groups_deletedBy)
    FROM (
        SELECT 
            T.id AS Groups_id, 
            T.groupName AS Groups_groupName, 
            T.deletedBy AS Groups_deletedBy, 
            True AS _from0
        FROM favStoreEntities.Groups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.invoice_items.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing invoice_items
        [favStoreModel.Store.invoice_items](T1.[invoice_items.id], T1.[invoice_items.invoiceId], T1.[invoice_items.branchId], T1.[invoice_items.itemId], T1.[invoice_items.cost], T1.[invoice_items.price], T1.[invoice_items.quantity], T1.[invoice_items.total], T1.[invoice_items.notes], T1.[invoice_items.tax], T1.[invoice_items.taxValue], T1.[invoice_items.totalWithTax])
    FROM (
        SELECT 
            T.id AS [invoice_items.id], 
            T.invoiceId AS [invoice_items.invoiceId], 
            T.branchId AS [invoice_items.branchId], 
            T.itemId AS [invoice_items.itemId], 
            T.cost AS [invoice_items.cost], 
            T.price AS [invoice_items.price], 
            T.quantity AS [invoice_items.quantity], 
            T.total AS [invoice_items.total], 
            T.notes AS [invoice_items.notes], 
            T.tax AS [invoice_items.tax], 
            T.taxValue AS [invoice_items.taxValue], 
            T.totalWithTax AS [invoice_items.totalWithTax], 
            True AS _from0
        FROM favStoreEntities.invoice_items AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.invoices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing invoices
        [favStoreModel.Store.invoices](T1.invoices_id, T1.invoices_branchId, T1.invoices_supplierId, T1.invoices_invoiceDate, T1.invoices_refNo, T1.invoices_serialNo, T1.invoices_discountCash, T1.invoices_discountCommercial, T1.invoices_extraExpenses, T1.invoices_totalInvoice, T1.invoices_total, T1.invoices_openedBy, T1.invoices_creationDate, T1.invoices_deletedBy, T1.invoices_deletedDate, T1.invoices_tax, T1.invoices_taxValue, T1.invoices_departmentId, T1.invoices_categoryId)
    FROM (
        SELECT 
            T.id AS invoices_id, 
            T.branchId AS invoices_branchId, 
            T.supplierId AS invoices_supplierId, 
            T.invoiceDate AS invoices_invoiceDate, 
            T.refNo AS invoices_refNo, 
            T.serialNo AS invoices_serialNo, 
            T.discountCash AS invoices_discountCash, 
            T.discountCommercial AS invoices_discountCommercial, 
            T.extraExpenses AS invoices_extraExpenses, 
            T.totalInvoice AS invoices_totalInvoice, 
            T.total AS invoices_total, 
            T.openedBy AS invoices_openedBy, 
            T.creationDate AS invoices_creationDate, 
            T.deletedBy AS invoices_deletedBy, 
            T.deletedDate AS invoices_deletedDate, 
            T.tax AS invoices_tax, 
            T.taxValue AS invoices_taxValue, 
            T.departmentId AS invoices_departmentId, 
            T.categoryId AS invoices_categoryId, 
            True AS _from0
        FROM favStoreEntities.invoices AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.itemsDecription.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing itemsDecription
        [favStoreModel.Store.itemsDecription](T1.itemsDecription_id, T1.itemsDecription_subject, T1.itemsDecription_cost, T1.itemsDecription_price, T1.itemsDecription_supplierId, T1.itemsDecription_code, T1.itemsDecription_branchId, T1.itemsDecription_lastEditBy, T1.itemsDecription_lastEditDate, T1.itemsDecription_deletedBy, T1.itemsDecription_expirationDate)
    FROM (
        SELECT 
            T.id AS itemsDecription_id, 
            T.subject AS itemsDecription_subject, 
            T.cost AS itemsDecription_cost, 
            T.price AS itemsDecription_price, 
            T.supplierId AS itemsDecription_supplierId, 
            T.code AS itemsDecription_code, 
            T.branchId AS itemsDecription_branchId, 
            T.lastEditBy AS itemsDecription_lastEditBy, 
            T.lastEditDate AS itemsDecription_lastEditDate, 
            T.deletedBy AS itemsDecription_deletedBy, 
            T.expirationDate AS itemsDecription_expirationDate, 
            True AS _from0
        FROM favStoreEntities.itemsDecriptions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.location-items.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing location-items
        [favStoreModel.Store.location-items](T1.[location-items_id], T1.[location-items_itemId], T1.[location-items_palltaId], T1.[location-items_isActive], T1.[location-items_palltaType])
    FROM (
        SELECT 
            T.id AS [location-items_id], 
            T.itemId AS [location-items_itemId], 
            T.palltaId AS [location-items_palltaId], 
            T.isActive AS [location-items_isActive], 
            T.palltaType AS [location-items_palltaType], 
            True AS _from0
        FROM favStoreEntities.location_items AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.locations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing locations
        [favStoreModel.Store.locations](T1.locations_id, T1.locations_description, T1.locations_code, T1.locations_parentId, T1.locations_isPallta, T1.locations_serial)
    FROM (
        SELECT 
            T.id AS locations_id, 
            T.description AS locations_description, 
            T.code AS locations_code, 
            T.parentId AS locations_parentId, 
            T.isPallta AS locations_isPallta, 
            T.serial AS locations_serial, 
            True AS _from0
        FROM favStoreEntities.locations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.refund_iems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing refund_iems
        [favStoreModel.Store.refund_iems](T1.[refund_iems.id], T1.[refund_iems.refundId], T1.[refund_iems.branchId], T1.[refund_iems.itemId], T1.[refund_iems.quantity], T1.[refund_iems.price], T1.[refund_iems.total])
    FROM (
        SELECT 
            T.id AS [refund_iems.id], 
            T.refundId AS [refund_iems.refundId], 
            T.branchId AS [refund_iems.branchId], 
            T.itemId AS [refund_iems.itemId], 
            T.quantity AS [refund_iems.quantity], 
            T.price AS [refund_iems.price], 
            T.total AS [refund_iems.total], 
            True AS _from0
        FROM favStoreEntities.refund_iems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.refunds.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing refunds
        [favStoreModel.Store.refunds](T1.refunds_id, T1.refunds_branchId, T1.refunds_cashierId, T1.refunds_openedBy, T1.refunds_serial, T1.refunds_total, T1.refunds_date, T1.refunds_deletedBy, T1.refunds_deletedDate, T1.refunds_time)
    FROM (
        SELECT 
            T.id AS refunds_id, 
            T.branchId AS refunds_branchId, 
            T.cashierId AS refunds_cashierId, 
            T.openedBy AS refunds_openedBy, 
            T.serial AS refunds_serial, 
            T.total AS refunds_total, 
            T.date AS refunds_date, 
            T.deletedBy AS refunds_deletedBy, 
            T.deletedDate AS refunds_deletedDate, 
            T.time AS refunds_time, 
            True AS _from0
        FROM favStoreEntities.refunds AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.suppliers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing suppliers
        [favStoreModel.Store.suppliers](T1.suppliers_id, T1.suppliers_code, T1.suppliers_name, T1.suppliers_email, T1.suppliers_phone, T1.suppliers_address, T1.suppliers_currentCredit, T1.suppliers_deletedBy)
    FROM (
        SELECT 
            T.id AS suppliers_id, 
            T.code AS suppliers_code, 
            T.name AS suppliers_name, 
            T.email AS suppliers_email, 
            T.phone AS suppliers_phone, 
            T.address AS suppliers_address, 
            T.currentCredit AS suppliers_currentCredit, 
            T.deletedBy AS suppliers_deletedBy, 
            True AS _from0
        FROM favStoreEntities.suppliers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.supplyOrders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing supplyOrders
        [favStoreModel.Store.supplyOrders](T1.supplyOrders_id, T1.supplyOrders_branchId, T1.supplyOrders_supplierId, T1.supplyOrders_OrderDate, T1.supplyOrders_CategoryId, T1.supplyOrders_serialNo, T1.supplyOrders_total, T1.supplyOrders_openedBy, T1.supplyOrders_creationDate, T1.supplyOrders_deletedBy, T1.supplyOrders_deletedDate)
    FROM (
        SELECT 
            T.id AS supplyOrders_id, 
            T.branchId AS supplyOrders_branchId, 
            T.supplierId AS supplyOrders_supplierId, 
            T.OrderDate AS supplyOrders_OrderDate, 
            T.CategoryId AS supplyOrders_CategoryId, 
            T.serialNo AS supplyOrders_serialNo, 
            T.total AS supplyOrders_total, 
            T.openedBy AS supplyOrders_openedBy, 
            T.creationDate AS supplyOrders_creationDate, 
            T.deletedBy AS supplyOrders_deletedBy, 
            T.deletedDate AS supplyOrders_deletedDate, 
            True AS _from0
        FROM favStoreEntities.supplyOrders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.supplyOrders_items.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing supplyOrders_items
        [favStoreModel.Store.supplyOrders_items](T1.[supplyOrders_items.id], T1.[supplyOrders_items.supplyOrderId], T1.[supplyOrders_items.branchId], T1.[supplyOrders_items.itemId], T1.[supplyOrders_items.cost], T1.[supplyOrders_items.quantity], T1.[supplyOrders_items.balance], T1.[supplyOrders_items.total])
    FROM (
        SELECT 
            T.id AS [supplyOrders_items.id], 
            T.supplyOrderId AS [supplyOrders_items.supplyOrderId], 
            T.branchId AS [supplyOrders_items.branchId], 
            T.itemId AS [supplyOrders_items.itemId], 
            T.cost AS [supplyOrders_items.cost], 
            T.quantity AS [supplyOrders_items.quantity], 
            T.balance AS [supplyOrders_items.balance], 
            T.total AS [supplyOrders_items.total], 
            True AS _from0
        FROM favStoreEntities.supplyOrders_items AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.transactionsHistory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing transactionsHistory
        [favStoreModel.Store.transactionsHistory](T1.transactionsHistory_id, T1.transactionsHistory_transactionId, T1.transactionsHistory_currentBranchId, T1.transactionsHistory_locationItemId, T1.transactionsHistory_price, T1.transactionsHistory_quantity, T1.transactionsHistory_cost, T1.transactionsHistory_transactionTypeId, T1.transactionsHistory_fromBranchId, T1.transactionsHistory_toBranchId, T1.transactionsHistory_reason, T1.transactionsHistory_total, T1.transactionsHistory_creationDate, T1.transactionsHistory_serialNo, T1.transactionsHistory_itemId)
    FROM (
        SELECT 
            T.id AS transactionsHistory_id, 
            T.transactionId AS transactionsHistory_transactionId, 
            T.currentBranchId AS transactionsHistory_currentBranchId, 
            T.locationItemId AS transactionsHistory_locationItemId, 
            T.price AS transactionsHistory_price, 
            T.quantity AS transactionsHistory_quantity, 
            T.cost AS transactionsHistory_cost, 
            T.transactionTypeId AS transactionsHistory_transactionTypeId, 
            T.fromBranchId AS transactionsHistory_fromBranchId, 
            T.toBranchId AS transactionsHistory_toBranchId, 
            T.reason AS transactionsHistory_reason, 
            T.total AS transactionsHistory_total, 
            T.creationDate AS transactionsHistory_creationDate, 
            T.serialNo AS transactionsHistory_serialNo, 
            T.itemId AS transactionsHistory_itemId, 
            True AS _from0
        FROM favStoreEntities.transactionsHistories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.transactionTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing transactionTypes
        [favStoreModel.Store.transactionTypes](T1.transactionTypes_id, T1.transactionTypes_title, T1.transactionTypes_action, T1.transactionTypes_notes)
    FROM (
        SELECT 
            T.id AS transactionTypes_id, 
            T.title AS transactionTypes_title, 
            T.action AS transactionTypes_action, 
            T.notes AS transactionTypes_notes, 
            True AS _from0
        FROM favStoreEntities.transactionTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.transactions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing transactions
        [favStoreModel.Store.transactions](T1.transactions_id, T1.transactions_branchId, T1.transactions_locationItemId, T1.transactions_itemId, T1.transactions_palltaId, T1.transactions_palltaType, T1.transactions_resourceCode, T1.transactions_description, T1.transactions_cost, T1.transactions_quantity, T1.transactions_price, T1.transactions_total, T1.transactions_editById, T1.transactions_editDate, T1.transactions_comment, T1.transactions_deleted)
    FROM (
        SELECT 
            T.id AS transactions_id, 
            T.branchId AS transactions_branchId, 
            T.locationItemId AS transactions_locationItemId, 
            T.itemId AS transactions_itemId, 
            T.palltaId AS transactions_palltaId, 
            T.palltaType AS transactions_palltaType, 
            T.resourceCode AS transactions_resourceCode, 
            T.description AS transactions_description, 
            T.cost AS transactions_cost, 
            T.quantity AS transactions_quantity, 
            T.price AS transactions_price, 
            T.total AS transactions_total, 
            T.editById AS transactions_editById, 
            T.editDate AS transactions_editDate, 
            T.comment AS transactions_comment, 
            T.deleted AS transactions_deleted, 
            True AS _from0
        FROM favStoreEntities.transactions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.accounts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing accounts
        [favStoreModel.account](T1.account_id, T1.account_userName, T1.account_contactName, T1.account_passWord, T1.account_address, T1.account_phone, T1.account_email, T1.account_groupId, T1.account_supervisorId, T1.account_userType, T1.account_branchId, T1.account_loggedTime, T1.account_shiftIn, T1.account_shiftOut, T1.account_deletedBy)
    FROM (
        SELECT 
            T.id AS account_id, 
            T.userName AS account_userName, 
            T.contactName AS account_contactName, 
            T.passWord AS account_passWord, 
            T.address AS account_address, 
            T.phone AS account_phone, 
            T.email AS account_email, 
            T.groupId AS account_groupId, 
            T.supervisorId AS account_supervisorId, 
            T.userType AS account_userType, 
            T.branchId AS account_branchId, 
            T.loggedTime AS account_loggedTime, 
            T.shiftIn AS account_shiftIn, 
            T.shiftOut AS account_shiftOut, 
            T.deletedBy AS account_deletedBy, 
            True AS _from0
        FROM favStoreModelStoreContainer.accounts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.branches.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing branches
        [favStoreModel.branch](T1.branch_id, T1.branch_code, T1.branch_name, T1.branch_address, T1.branch_email, T1.branch_phone, T1.branch_deletedBy, T1.branch_isDefault)
    FROM (
        SELECT 
            T.id AS branch_id, 
            T.code AS branch_code, 
            T.name AS branch_name, 
            T.address AS branch_address, 
            T.email AS branch_email, 
            T.phone AS branch_phone, 
            T.deletedBy AS branch_deletedBy, 
            T.isDefault AS branch_isDefault, 
            True AS _from0
        FROM favStoreModelStoreContainer.branches AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.cashiers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing cashiers
        [favStoreModel.cashier](T1.cashier_id, T1.cashier_branchId, T1.cashier_openedBy, T1.cashier_date, T1.cashier_serial, T1.cashier_time, T1.cashier_total, T1.cashier_paymentType, T1.cashier_customerId, T1.cashier_notes, T1.cashier_deletedBy, T1.cashier_deletedDate)
    FROM (
        SELECT 
            T.id AS cashier_id, 
            T.branchId AS cashier_branchId, 
            T.openedBy AS cashier_openedBy, 
            T.date AS cashier_date, 
            T.serial AS cashier_serial, 
            T.time AS cashier_time, 
            T.total AS cashier_total, 
            T.paymentType AS cashier_paymentType, 
            T.customerId AS cashier_customerId, 
            T.notes AS cashier_notes, 
            T.deletedBy AS cashier_deletedBy, 
            T.deletedDate AS cashier_deletedDate, 
            True AS _from0
        FROM favStoreModelStoreContainer.cashier AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.cashier_items.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing cashier_items
        [favStoreModel.cashier_items](T1.[cashier_items.id], T1.[cashier_items.branchId], T1.[cashier_items.cashierId], T1.[cashier_items.itemId], T1.[cashier_items.quantity], T1.[cashier_items.price], T1.[cashier_items.total])
    FROM (
        SELECT 
            T.id AS [cashier_items.id], 
            T.branchId AS [cashier_items.branchId], 
            T.cashierId AS [cashier_items.cashierId], 
            T.itemId AS [cashier_items.itemId], 
            T.quantity AS [cashier_items.quantity], 
            T.price AS [cashier_items.price], 
            T.total AS [cashier_items.total], 
            True AS _from0
        FROM favStoreModelStoreContainer.cashier_items AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.customers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing customers
        [favStoreModel.customer](T1.customer_id, T1.customer_code, T1.customer_name, T1.customer_address, T1.customer_phone, T1.customer_email, T1.customer_isCash, T1.customer_currentCredit, T1.customer_deletedBy, T1.customer_dueDay)
    FROM (
        SELECT 
            T.id AS customer_id, 
            T.code AS customer_code, 
            T.name AS customer_name, 
            T.address AS customer_address, 
            T.phone AS customer_phone, 
            T.email AS customer_email, 
            T.isCash AS customer_isCash, 
            T.currentCredit AS customer_currentCredit, 
            T.deletedBy AS customer_deletedBy, 
            T.dueDay AS customer_dueDay, 
            True AS _from0
        FROM favStoreModelStoreContainer.customers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.groupPermissions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing groupPermissions
        [favStoreModel.groupPermission](T1.groupPermission_id, T1.groupPermission_groupId, T1.groupPermission_permissionCode, T1.groupPermission_value)
    FROM (
        SELECT 
            T.id AS groupPermission_id, 
            T.groupId AS groupPermission_groupId, 
            T.permissionCode AS groupPermission_permissionCode, 
            T.[value] AS groupPermission_value, 
            True AS _from0
        FROM favStoreModelStoreContainer.groupPermissions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.Groups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Groups
        [favStoreModel.Group](T1.Group_id, T1.Group_groupName, T1.Group_deletedBy)
    FROM (
        SELECT 
            T.id AS Group_id, 
            T.groupName AS Group_groupName, 
            T.deletedBy AS Group_deletedBy, 
            True AS _from0
        FROM favStoreModelStoreContainer.Groups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.invoice_items.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing invoice_items
        [favStoreModel.invoice_items](T1.[invoice_items.id], T1.[invoice_items.invoiceId], T1.[invoice_items.branchId], T1.[invoice_items.itemId], T1.[invoice_items.cost], T1.[invoice_items.price], T1.[invoice_items.quantity], T1.[invoice_items.total], T1.[invoice_items.notes], T1.[invoice_items.tax], T1.[invoice_items.taxValue], T1.[invoice_items.totalWithTax])
    FROM (
        SELECT 
            T.id AS [invoice_items.id], 
            T.invoiceId AS [invoice_items.invoiceId], 
            T.branchId AS [invoice_items.branchId], 
            T.itemId AS [invoice_items.itemId], 
            T.cost AS [invoice_items.cost], 
            T.price AS [invoice_items.price], 
            T.quantity AS [invoice_items.quantity], 
            T.total AS [invoice_items.total], 
            T.notes AS [invoice_items.notes], 
            T.tax AS [invoice_items.tax], 
            T.taxValue AS [invoice_items.taxValue], 
            T.totalWithTax AS [invoice_items.totalWithTax], 
            True AS _from0
        FROM favStoreModelStoreContainer.invoice_items AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.invoices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing invoices
        [favStoreModel.invoice](T1.invoice_id, T1.invoice_branchId, T1.invoice_supplierId, T1.invoice_invoiceDate, T1.invoice_refNo, T1.invoice_serialNo, T1.invoice_discountCash, T1.invoice_discountCommercial, T1.invoice_extraExpenses, T1.invoice_totalInvoice, T1.invoice_total, T1.invoice_openedBy, T1.invoice_creationDate, T1.invoice_deletedBy, T1.invoice_deletedDate, T1.invoice_tax, T1.invoice_taxValue, T1.invoice_departmentId, T1.invoice_categoryId)
    FROM (
        SELECT 
            T.id AS invoice_id, 
            T.branchId AS invoice_branchId, 
            T.supplierId AS invoice_supplierId, 
            T.invoiceDate AS invoice_invoiceDate, 
            T.refNo AS invoice_refNo, 
            T.serialNo AS invoice_serialNo, 
            T.discountCash AS invoice_discountCash, 
            T.discountCommercial AS invoice_discountCommercial, 
            T.extraExpenses AS invoice_extraExpenses, 
            T.totalInvoice AS invoice_totalInvoice, 
            T.total AS invoice_total, 
            T.openedBy AS invoice_openedBy, 
            T.creationDate AS invoice_creationDate, 
            T.deletedBy AS invoice_deletedBy, 
            T.deletedDate AS invoice_deletedDate, 
            T.tax AS invoice_tax, 
            T.taxValue AS invoice_taxValue, 
            T.departmentId AS invoice_departmentId, 
            T.categoryId AS invoice_categoryId, 
            True AS _from0
        FROM favStoreModelStoreContainer.invoices AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.itemsDecriptions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing itemsDecriptions
        [favStoreModel.itemsDecription](T1.itemsDecription_id, T1.itemsDecription_subject, T1.itemsDecription_cost, T1.itemsDecription_price, T1.itemsDecription_supplierId, T1.itemsDecription_code, T1.itemsDecription_branchId, T1.itemsDecription_lastEditBy, T1.itemsDecription_lastEditDate, T1.itemsDecription_deletedBy, T1.itemsDecription_expirationDate)
    FROM (
        SELECT 
            T.id AS itemsDecription_id, 
            T.subject AS itemsDecription_subject, 
            T.cost AS itemsDecription_cost, 
            T.price AS itemsDecription_price, 
            T.supplierId AS itemsDecription_supplierId, 
            T.code AS itemsDecription_code, 
            T.branchId AS itemsDecription_branchId, 
            T.lastEditBy AS itemsDecription_lastEditBy, 
            T.lastEditDate AS itemsDecription_lastEditDate, 
            T.deletedBy AS itemsDecription_deletedBy, 
            T.expirationDate AS itemsDecription_expirationDate, 
            True AS _from0
        FROM favStoreModelStoreContainer.itemsDecription AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.location_items.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing location_items
        [favStoreModel.location_items](T1.[location_items.id], T1.[location_items.itemId], T1.[location_items.palltaId], T1.[location_items.isActive], T1.[location_items.palltaType])
    FROM (
        SELECT 
            T.id AS [location_items.id], 
            T.itemId AS [location_items.itemId], 
            T.palltaId AS [location_items.palltaId], 
            T.isActive AS [location_items.isActive], 
            T.palltaType AS [location_items.palltaType], 
            True AS _from0
        FROM favStoreModelStoreContainer.[location-items] AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.locations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing locations
        [favStoreModel.location](T1.location_id, T1.location_description, T1.location_code, T1.location_parentId, T1.location_isPallta, T1.location_serial)
    FROM (
        SELECT 
            T.id AS location_id, 
            T.description AS location_description, 
            T.code AS location_code, 
            T.parentId AS location_parentId, 
            T.isPallta AS location_isPallta, 
            T.serial AS location_serial, 
            True AS _from0
        FROM favStoreModelStoreContainer.locations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.refund_iems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing refund_iems
        [favStoreModel.refund_iems](T1.[refund_iems.id], T1.[refund_iems.refundId], T1.[refund_iems.branchId], T1.[refund_iems.itemId], T1.[refund_iems.quantity], T1.[refund_iems.price], T1.[refund_iems.total])
    FROM (
        SELECT 
            T.id AS [refund_iems.id], 
            T.refundId AS [refund_iems.refundId], 
            T.branchId AS [refund_iems.branchId], 
            T.itemId AS [refund_iems.itemId], 
            T.quantity AS [refund_iems.quantity], 
            T.price AS [refund_iems.price], 
            T.total AS [refund_iems.total], 
            True AS _from0
        FROM favStoreModelStoreContainer.refund_iems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.refunds.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing refunds
        [favStoreModel.refund](T1.refund_id, T1.refund_branchId, T1.refund_cashierId, T1.refund_openedBy, T1.refund_serial, T1.refund_total, T1.refund_date, T1.refund_deletedBy, T1.refund_deletedDate, T1.refund_time)
    FROM (
        SELECT 
            T.id AS refund_id, 
            T.branchId AS refund_branchId, 
            T.cashierId AS refund_cashierId, 
            T.openedBy AS refund_openedBy, 
            T.serial AS refund_serial, 
            T.total AS refund_total, 
            T.date AS refund_date, 
            T.deletedBy AS refund_deletedBy, 
            T.deletedDate AS refund_deletedDate, 
            T.time AS refund_time, 
            True AS _from0
        FROM favStoreModelStoreContainer.refunds AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.suppliers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing suppliers
        [favStoreModel.supplier](T1.supplier_id, T1.supplier_code, T1.supplier_name, T1.supplier_email, T1.supplier_phone, T1.supplier_address, T1.supplier_currentCredit, T1.supplier_deletedBy)
    FROM (
        SELECT 
            T.id AS supplier_id, 
            T.code AS supplier_code, 
            T.name AS supplier_name, 
            T.email AS supplier_email, 
            T.phone AS supplier_phone, 
            T.address AS supplier_address, 
            T.currentCredit AS supplier_currentCredit, 
            T.deletedBy AS supplier_deletedBy, 
            True AS _from0
        FROM favStoreModelStoreContainer.suppliers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.supplyOrders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing supplyOrders
        [favStoreModel.supplyOrder](T1.supplyOrder_id, T1.supplyOrder_branchId, T1.supplyOrder_supplierId, T1.supplyOrder_OrderDate, T1.supplyOrder_CategoryId, T1.supplyOrder_serialNo, T1.supplyOrder_total, T1.supplyOrder_openedBy, T1.supplyOrder_creationDate, T1.supplyOrder_deletedBy, T1.supplyOrder_deletedDate)
    FROM (
        SELECT 
            T.id AS supplyOrder_id, 
            T.branchId AS supplyOrder_branchId, 
            T.supplierId AS supplyOrder_supplierId, 
            T.OrderDate AS supplyOrder_OrderDate, 
            T.CategoryId AS supplyOrder_CategoryId, 
            T.serialNo AS supplyOrder_serialNo, 
            T.total AS supplyOrder_total, 
            T.openedBy AS supplyOrder_openedBy, 
            T.creationDate AS supplyOrder_creationDate, 
            T.deletedBy AS supplyOrder_deletedBy, 
            T.deletedDate AS supplyOrder_deletedDate, 
            True AS _from0
        FROM favStoreModelStoreContainer.supplyOrders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.supplyOrders_items.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing supplyOrders_items
        [favStoreModel.supplyOrders_items](T1.[supplyOrders_items.id], T1.[supplyOrders_items.supplyOrderId], T1.[supplyOrders_items.branchId], T1.[supplyOrders_items.itemId], T1.[supplyOrders_items.cost], T1.[supplyOrders_items.quantity], T1.[supplyOrders_items.balance], T1.[supplyOrders_items.total])
    FROM (
        SELECT 
            T.id AS [supplyOrders_items.id], 
            T.supplyOrderId AS [supplyOrders_items.supplyOrderId], 
            T.branchId AS [supplyOrders_items.branchId], 
            T.itemId AS [supplyOrders_items.itemId], 
            T.cost AS [supplyOrders_items.cost], 
            T.quantity AS [supplyOrders_items.quantity], 
            T.balance AS [supplyOrders_items.balance], 
            T.total AS [supplyOrders_items.total], 
            True AS _from0
        FROM favStoreModelStoreContainer.supplyOrders_items AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.transactionsHistories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing transactionsHistories
        [favStoreModel.transactionsHistory](T1.transactionsHistory_id, T1.transactionsHistory_transactionId, T1.transactionsHistory_currentBranchId, T1.transactionsHistory_locationItemId, T1.transactionsHistory_price, T1.transactionsHistory_quantity, T1.transactionsHistory_cost, T1.transactionsHistory_transactionTypeId, T1.transactionsHistory_fromBranchId, T1.transactionsHistory_toBranchId, T1.transactionsHistory_reason, T1.transactionsHistory_total, T1.transactionsHistory_creationDate, T1.transactionsHistory_serialNo, T1.transactionsHistory_itemId)
    FROM (
        SELECT 
            T.id AS transactionsHistory_id, 
            T.transactionId AS transactionsHistory_transactionId, 
            T.currentBranchId AS transactionsHistory_currentBranchId, 
            T.locationItemId AS transactionsHistory_locationItemId, 
            T.price AS transactionsHistory_price, 
            T.quantity AS transactionsHistory_quantity, 
            T.cost AS transactionsHistory_cost, 
            T.transactionTypeId AS transactionsHistory_transactionTypeId, 
            T.fromBranchId AS transactionsHistory_fromBranchId, 
            T.toBranchId AS transactionsHistory_toBranchId, 
            T.reason AS transactionsHistory_reason, 
            T.total AS transactionsHistory_total, 
            T.creationDate AS transactionsHistory_creationDate, 
            T.serialNo AS transactionsHistory_serialNo, 
            T.itemId AS transactionsHistory_itemId, 
            True AS _from0
        FROM favStoreModelStoreContainer.transactionsHistory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.transactionTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing transactionTypes
        [favStoreModel.transactionType](T1.transactionType_id, T1.transactionType_title, T1.transactionType_action, T1.transactionType_notes)
    FROM (
        SELECT 
            T.id AS transactionType_id, 
            T.title AS transactionType_title, 
            T.action AS transactionType_action, 
            T.notes AS transactionType_notes, 
            True AS _from0
        FROM favStoreModelStoreContainer.transactionTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.transactions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing transactions
        [favStoreModel.transaction](T1.transaction_id, T1.transaction_branchId, T1.transaction_locationItemId, T1.transaction_itemId, T1.transaction_palltaId, T1.transaction_palltaType, T1.transaction_resourceCode, T1.transaction_description, T1.transaction_cost, T1.transaction_quantity, T1.transaction_price, T1.transaction_total, T1.transaction_editById, T1.transaction_editDate, T1.transaction_comment, T1.transaction_deleted)
    FROM (
        SELECT 
            T.id AS transaction_id, 
            T.branchId AS transaction_branchId, 
            T.locationItemId AS transaction_locationItemId, 
            T.itemId AS transaction_itemId, 
            T.palltaId AS transaction_palltaId, 
            T.palltaType AS transaction_palltaType, 
            T.resourceCode AS transaction_resourceCode, 
            T.description AS transaction_description, 
            T.cost AS transaction_cost, 
            T.quantity AS transaction_quantity, 
            T.price AS transaction_price, 
            T.total AS transaction_total, 
            T.editById AS transaction_editById, 
            T.editDate AS transaction_editDate, 
            T.comment AS transaction_comment, 
            T.deleted AS transaction_deleted, 
            True AS _from0
        FROM favStoreModelStoreContainer.transactions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.default_list.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing default_list
        [favStoreModel.Store.default_list](T1.[default_list.id], T1.[default_list.title], T1.[default_list.action], T1.[default_list.type])
    FROM (
        SELECT 
            T.id AS [default_list.id], 
            T.title AS [default_list.title], 
            T.action AS [default_list.action], 
            T.type AS [default_list.type], 
            True AS _from0
        FROM favStoreEntities.default_list AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.default_list.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing default_list
        [favStoreModel.default_list](T1.[default_list.id], T1.[default_list.title], T1.[default_list.action], T1.[default_list.type])
    FROM (
        SELECT 
            T.id AS [default_list.id], 
            T.title AS [default_list.title], 
            T.action AS [default_list.action], 
            T.type AS [default_list.type], 
            True AS _from0
        FROM favStoreModelStoreContainer.default_list AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreModelStoreContainer.inven_Settings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing inven_Settings
        [favStoreModel.Store.inven_Settings](T1.[inven_Settings.id], T1.[inven_Settings.branchId], T1.[inven_Settings.checkDays], T1.[inven_Settings.lastCheckDate])
    FROM (
        SELECT 
            T.id AS [inven_Settings.id], 
            T.branchId AS [inven_Settings.branchId], 
            T.checkDays AS [inven_Settings.checkDays], 
            T.lastCheckDate AS [inven_Settings.lastCheckDate], 
            True AS _from0
        FROM favStoreEntities.inven_Settings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for favStoreEntities.inven_Settings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing inven_Settings
        [favStoreModel.inven_Settings](T1.[inven_Settings.id], T1.[inven_Settings.branchId], T1.[inven_Settings.checkDays], T1.[inven_Settings.lastCheckDate])
    FROM (
        SELECT 
            T.id AS [inven_Settings.id], 
            T.branchId AS [inven_Settings.branchId], 
            T.checkDays AS [inven_Settings.checkDays], 
            T.lastCheckDate AS [inven_Settings.lastCheckDate], 
            True AS _from0
        FROM favStoreModelStoreContainer.inven_Settings AS T
    ) AS T1");
        }
    }
}
